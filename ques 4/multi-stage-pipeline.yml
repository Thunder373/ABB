trigger:
  branches:
    include:
      - main

stages:
  - stage: DeployToDev
    displayName: 'Deploy to Development'
    jobs:
      - job: Deploy
        displayName: 'Deploy to Azure App Service (Dev)'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'azureconnection'
              appName: '$(appName)'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'zipDeploy'
            env:
              appName: ${{ parameters.dev.appName }}
              appInsightsKey: ${{ parameters.dev.appInsightsKey }}
              connectionString: ${{ parameters.dev.connectionString }}

  - stage: DeployToTest
    displayName: 'Deploy to Testing'
    dependsOn: DeployToDev
    jobs:
      - job: Deploy
        displayName: 'Deploy to Azure App Service (Test)'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'azureconnection'
              appName: '$(appName)'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'zipDeploy'
            env:
              appName: ${{ parameters.test.appName }}
              appInsightsKey: ${{ parameters.test.appInsightsKey }}
              connectionString: ${{ parameters.test.connectionString }}

  - stage: DeployToProd
    displayName: 'Deploy to Production'
    dependsOn: DeployToTest
    condition: succeeded('DeployToTest')
    jobs:
      - job: Deploy
        displayName: 'Deploy to Azure App Service (Prod)'
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'azureconnection'
              appName: '$(appName)'
              package: '$(Pipeline.Workspace)/drop/*.zip'
              deploymentMethod: 'zipDeploy'
            env:
              appName: ${{ parameters.prod.appName }}
              appInsightsKey: ${{ parameters.prod.appInsightsKey }}
              connectionString: ${{ parameters.prod.connectionString }}

parameters:
  - name: dev
    type: object
    default:
      appName: 'appdev'
      appInsightsKey: 'Instrumentation Key: 12345678-1234-1234-1234-123456789abc'
      connectionString: 'InstrumentationKey=12345678-1234-1234-1234-123456789abc;IngestionEndpoint=https://eastus.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus.livediagnostics.monitor.azure.com/'

  - name: test
    type: object
    default:
      appName: 'apptest'
      appInsightsKey: 'Instrumentation Key: 12345678-1234-1234-1234-123456789abc'
      connectionString: 'InstrumentationKey=12345678-1234-1234-1234-123456789abc;IngestionEndpoint=https://eastus.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus.livediagnostics.monitor.azure.com/'

  - name: prod
    type: object
    default:
      appName: 'appprod'
      appInsightsKey: 'Instrumentation Key: 12345678-1234-1234-1234-123456789abc'
      connectionString: 'InstrumentationKey=12345678-1234-1234-1234-123456789abc;IngestionEndpoint=https://eastus.in.applicationinsights.azure.com/;LiveEndpoint=https://eastus.livediagnostics.monitor.azure.com/'
